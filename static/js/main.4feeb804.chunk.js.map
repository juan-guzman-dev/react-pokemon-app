{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","reportWebVitals.js","index.js"],"names":["Pokecard","props","imgSrc","id","className","name","src","alt","type","exp","Pokedex","console","log","pokemon","winMessage","borderColorWinner","isWinner","style","borderColor","num","map","p","base_experience","Pokegame","hand1","hand2","length","randIdx","Math","floor","random","randPokemon","splice","push","exp1","reduce","exp2","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAsBeA,MAbf,SAAkBC,GACd,IAAIC,EAAM,UAPG,6EAOH,OAAiBD,EAAME,GAAvB,QAEV,OACI,sBAAKC,UAAU,WAAf,UACI,qBAAKA,UAAU,iBAAf,SAAiCH,EAAMI,OACvC,qBAAKD,UAAU,iBAAiBE,IAAKJ,EAAQK,IAAI,YACjD,sBAAKH,UAAU,gBAAf,mBAAsCH,EAAMO,QAC5C,sBAAKJ,UAAU,gBAAf,yBAA4CH,EAAMQ,W,MCmB/CC,MA9Bf,SAAiBT,GACbU,QAAQC,IAAIX,EAAMY,QAAQ,GAAGV,IAC7B,IAAIW,EAAa,KACbC,EAAoB,KAQxB,OAPId,EAAMe,WACNF,EAAa,mBAAGV,UAAU,iBAAb,qGACbW,EAAoB,OAMpB,sBAAKX,UAAU,UAAUa,MAAO,CAAEC,YAAaH,GAA/C,UACKD,EACD,qBAAIV,UAAU,gBAAd,qBAAuCH,EAAMkB,OAC7C,qBAAKf,UAAU,gBAAf,SACKH,EAAMY,QAAQO,KAAI,SAAAC,GAAC,OAChB,cAAE,EAAF,CACIlB,GAAIkB,EAAElB,GACNE,KAAMgB,EAAEhB,KACRG,KAAMa,EAAEb,KACRC,IAAKY,EAAEC,uBAInB,oDAAuBrB,EAAMQ,WC5BzC,SAASc,EAAStB,GAId,IAHA,IAAIuB,EAAQ,GACRC,EAAK,YAAOxB,EAAMY,SAEfW,EAAME,OAASD,EAAMC,QAAQ,CAEhC,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,QAC3CK,EAAcN,EAAMO,OAAOL,EAAS,GAAG,GAC3CH,EAAMS,KAAKF,GAGf,IAAIG,EAAOV,EAAMW,QAAO,SAAC1B,EAAKI,GAAN,OAAkBJ,EAAMI,EAAQS,kBAAiB,GACrEc,EAAOX,EAAMU,QAAO,SAAC1B,EAAKI,GAAN,OAAkBJ,EAAMI,EAAQS,kBAAiB,GAEzE,OACI,gCACI,cAAC,EAAD,CAASH,IAAK,EAAGN,QAASW,EAAOf,IAAKyB,EAAMlB,SAAUkB,EAAOE,IAC7D,cAAC,EAAD,CAASjB,IAAK,EAAGN,QAASY,EAAOhB,IAAK2B,EAAMpB,SAAUoB,EAAOF,OAKzEX,EAASc,aAAe,CACpBxB,QAAS,CACL,CAAEV,GAAI,EAAGE,KAAM,aAAcG,KAAM,OAAQc,gBAAiB,IAC5D,CAAEnB,GAAI,EAAGE,KAAM,WAAYG,KAAM,QAASc,gBAAiB,IAC3D,CAAEnB,GAAI,GAAIE,KAAM,UAAWG,KAAM,MAAOc,gBAAiB,IACzD,CAAEnB,GAAI,GAAIE,KAAM,aAAcG,KAAM,SAAUc,gBAAiB,KAC/D,CAAEnB,GAAI,GAAIE,KAAM,UAAWG,KAAM,WAAYc,gBAAiB,KAC9D,CAAEnB,GAAI,GAAIE,KAAM,aAAcG,KAAM,SAAUc,gBAAiB,IAC/D,CAAEnB,GAAI,GAAIE,KAAM,SAAUG,KAAM,SAAUc,gBAAiB,KAC3D,CAAEnB,GAAI,IAAKE,KAAM,QAASG,KAAM,SAAUc,gBAAiB,MAIpDC,QC3BAe,MARf,WACE,OACE,qBAAKlC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4feeb804.chunk.js","sourcesContent":["import React from 'react';\nimport './Pokecard.css';\n\nconst POKE_API = 'https://raw.githubusercontent.com/' +\n    'PokeAPI/sprites/master/sprites/pokemon/';\n\n\n/** Individual Pokemon card. */\n\nfunction Pokecard(props) {\n    let imgSrc = `${POKE_API}${props.id}.png`;\n\n    return (\n        <div className=\"Pokecard\">\n            <div className=\"Pokecard-title\">{props.name}</div>\n            <img className=\"Pokecard-image\" src={imgSrc} alt=\"pokemon\" />\n            <div className=\"Pokecard-data\">Type: {props.type}</div>\n            <div className=\"Pokecard-data\">Experience: {props.exp}</div>\n        </div>\n    );\n}\n\nexport default Pokecard;","import React from \"react\";\nimport Pokecard from \"./Pokecard\";\nimport \"./Pokedex.css\";\n\n/** Index of Pokemon: show individual cards. */\n\nfunction Pokedex(props) {\n    console.log(props.pokemon[0].id)\n    let winMessage = null;\n    let borderColorWinner = null\n    if (props.isWinner) {\n        winMessage = <p className=\"Pokedex-winner\">ðŸŽ‰ðŸŽ‰ðŸŽ‰THIS HAND WINS!ðŸŽ‰ðŸŽ‰ðŸŽ‰</p>;\n        borderColorWinner = 'red'\n    }\n\n\n\n    return (\n        <div className=\"Pokedex\" style={{ borderColor: borderColorWinner }} >\n            {winMessage}\n            <h2 className=\"Pokedex-title\">Pokedex {props.num}</h2>\n            <div className=\"Pokedex-cards\">\n                {props.pokemon.map(p => (\n                    < Pokecard\n                        id={p.id}\n                        name={p.name}\n                        type={p.type}\n                        exp={p.base_experience}\n                    />\n                ))}\n            </div>\n            <h4>Total experience: {props.exp}</h4>\n        </ div>\n    );\n}\n\nexport default Pokedex;","import React from \"react\";\nimport Pokedex from \"./Pokedex\";\n\nfunction Pokegame(props) {\n    let hand1 = [];\n    let hand2 = [...props.pokemon];\n\n    while (hand1.length < hand2.length) {\n        // take a random pokemon from hand 2, add it to hand 1\n        let randIdx = Math.floor(Math.random() * hand2.length);\n        let randPokemon = hand2.splice(randIdx, 1)[0];\n        hand1.push(randPokemon);\n    }\n\n    let exp1 = hand1.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\n    let exp2 = hand2.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\n\n    return (\n        <div>\n            <Pokedex num={1} pokemon={hand1} exp={exp1} isWinner={exp1 > exp2} />\n            <Pokedex num={2} pokemon={hand2} exp={exp2} isWinner={exp2 > exp1} />\n        </div>\n    );\n}\n\nPokegame.defaultProps = {\n    pokemon: [\n        { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\n        { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n        { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n        { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n        { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n        { id: 39, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\n        { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n        { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 }\n    ]\n};\n\nexport default Pokegame;","import React from 'react';\nimport Pokegame from './Pokegame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}